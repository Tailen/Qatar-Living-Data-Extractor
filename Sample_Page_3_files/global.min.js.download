var Filters = Backbone.View.extend({
  el: $('.b-filters-pack'),

  initialize: function() {
    this.render();
  },

  render: function() {
    //this.filterPriceSlider();
    this.filterAutocomplete();
    this.filterSelect();
  },

  events: {
    'click .b-filter--el-results-toggle-button': 'showAutocompleteResultsByClick',
    'click .b-filter--el-results-reset-button': 'showAutocompleteResultsByClick',
    'focus .b-filter--el-input-target': 'showAutocompleteResultsByFocus',
    'blur .b-filter--el-input-target': 'removeAutocompleteResults',
    'click .b-expand-filters-button': 'toggleAdditionalFilters',
    'click .b-mixed-categories--el-control-expand': 'toggleAdditionalFilters',
    'click .b-filtered-categories--el-toggle-all': 'toggleAllCategories',
    'click .b-filtered-categories--el-toggle-mobile': 'toggleSteps',
    'click .toggle-collapsed-categories': 'toggleMobileCollapsedOptions',
    'click .b-filter[data-filter-id = search] .b-filter--el-search-button': 'filterMobileSearch'
  },

  showAutocompleteResultsByClick: function(ev) {
    ev.preventDefault();

    var $parent = $(ev.currentTarget).parent();
    var $input = $parent.find('.b-filter--el-input-target');
    var $buttonToggle = $parent.find('.b-filter--el-results-toggle-button');
    var $buttonReset = $parent.find('.b-filter--el-results-reset-button');

    $(ev.currentTarget).data('role') === 'toggle' ? $input.focus() : false;
  },

  showAutocompleteResultsByFocus: function(ev) {
    var $parent = $(ev.currentTarget).parent();
    var $input = $parent.find('.b-filter--el-input-target');
    var $buttonToggle = $parent.find('.b-filter--el-results-toggle-button');
    var $buttonReset = $parent.find('.b-filter--el-results-reset-button');

    _.each([$buttonToggle, $buttonReset], function(el) { el.addClass('active'); });

    $input.mixedcomplete('search', '');
  },

  removeAutocompleteResults: function(ev) {
    var $parent = $(ev.currentTarget).parent();
    var $input = $parent.find('.b-filter--el-input-target');
    var $buttonToggle = $parent.find('.b-filter--el-results-toggle-button');
    var $buttonReset = $parent.find('.b-filter--el-results-reset-button');

    _.each([$buttonToggle, $buttonReset], function(el) { el.removeClass('active'); });
  },

  filterPriceSlider: function() {
    var $priceFilter = $('.b-filter[data-filter-id = price-slider]');

    if (!$priceFilter.length) { return; }

    var $priceSlider = $priceFilter.find('.b-filter--el-price-slider');
    var $priceMin = $priceSlider.find('.b-filter--el-price-mod-min');
    var $priceMax = $priceSlider.find('.b-filter--el-price-mod-max');
    var priceMinVal = $priceFilter.data('price-min');
    var priceMaxVal = $priceFilter.data('price-max');

    $priceSlider.slider({
      range: true,
      min: priceMinVal,
      max: priceMaxVal,
      values: [priceMinVal, priceMaxVal],
      slide: function(event, ui) {}
    });

    $priceMin.html(priceMinVal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + '<br>' + 'QAR');
    $priceMax.html(priceMaxVal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + '<br>' + 'QAR');
  },

  filterAutocomplete: function() {
    var $locationFilter = $('.b-filter[data-filter-type = autocomplete]');
    var $locationField = $locationFilter.find('.b-filter--el-input-target');

    var source = [
      {
        km: {
          2: '2 km',
          5: '5 km',
          10: '10 km'
        }
      },
      {
        value: 'as-sani',
        label: 'AS SANI'
      },
      {
        value: 'as-sawq',
        label: 'AS SAWQ'
      },
      {
        value: 'umm-said',
        label: 'UMM SA\'ID'
      },
      {
        value: 'umm-salal-ali',
        label: 'UMM SALAL ALI'
      }
    ];

    $.widget('custom.mixedcomplete', $.ui.autocomplete, {
      _create: function() {
        this._super();
        this.widget().menu('option', 'items', '> :not(.disabled)').addClass('b-results-list');
      },

      _renderMenu: function(ul, items) {
        var that = this;
        var $autocompleteTitle = $('<li></li>')
          .addClass('b-results-list--el-title disabled')
          .append('<span class="b-results-list--el-label">by City</span>');

        if (source[0].km !== undefined) {
          var kms = source[0].km;
          var $modDistance = $('<li></li>').addClass('b-results-list--el-top-block disabled');

          $modDistance
            .append('<span class="b-results-list--el-label">by Distance</span>')
            .append($.map(kms, function(index, item) {
              return $('<a class="b-results-list--el-link">' + index + '</a>').attr('data-distance', item);
            }))
            .appendTo(ul);
        }

        $autocompleteTitle.appendTo(ul);

        $.each(items, function(index, item) {
          that._renderItemData(ul, item);
        });
      },

      _renderItem: function(ul, item) {
        return $('<li>')
          .addClass('b-results-list--el-item')
          .append(
          $('<a>')
            .attr('data-location-id', item.value)
            .addClass('b-results-list--el-link')
            .text(item.label))
          .appendTo(ul);
      }
    });

    $locationField.mixedcomplete({
      source: source,
      position: {my: 'left top+9.5'},
      minLength: 0,
      messages: {
        noResults: '',
        results: function() {}
      },

      open: function(event, ui) {
        var _this = $(this);
        var $parent = _this.parent().parent();
        var parentWidth = $parent.width();

        _this.mixedcomplete('widget').css('width', parentWidth);
      },
      focus: function(event, ui) {},
      select: function(event, ui) {
        $(this).blur();
      },
      change: function(event, ui) {},
      create: function(event, ui) {},
      close: function(event, ui) {}
    });
  },

  toggleAdditionalFilters: function(ev) {
    ev.preventDefault();

    var $button = $(ev.currentTarget);
    var $target = $('.b-filters-block.additional');
    var $label = $button.find('.b-expand-filters-button--el-label');
    var initCaption = $button.data('init-caption');
    var toggledCaption = $button.data('toggled-caption');

    $button.toggleClass('active');
    $target.slideToggle();

    if ($label.length !== 0) {
      $button.hasClass('active') ? $label.html(toggledCaption) : $label.html(initCaption);
    } else {
      $button.hasClass('active') ? $button.html(toggledCaption) : $button.html(initCaption);
    }
    if($('.b-filters-block.additional').length){
          //$('.search-button').slideToggle(0);
          $('.b-filters-block.additional').append('<div class="search-button" style="right:30px;"><input class="b-filters-control b-clear-filters active form-submit" type="submit" id="search" name="op" value="Search"></div>');
    }

  },

  toggleAllCategories: function(ev) {
    ev.preventDefault();

    var $button = $(ev.currentTarget);
    var $mass = [
      $('.b-filtered-category.featured'),
      $('.b-filtered-category.all')
    ];

    _.each($mass, function(el) { el.slideToggle(); });
  },

  toggleSteps: function(ev) {
    ev.preventDefault();

    var $button = $(ev.currentTarget);
    var $steps = [
      $('.b-filtered-category.all')
    ];

    _.each($steps, function(el) { el.slideToggle(); });
  },

  toggleMobileCollapsedOptions: function(ev) {
    ev.preventDefault();

    var $button = $(ev.currentTarget);
    var $buttonShow = $('.toggle-collapsed-categories[data-role = show]');
    var $buttonHide = $('.toggle-collapsed-categories[data-role = hide]');
    var $target = $('.mobile-collapsed-options');
    var role = $button.data('role');

    _.each([$buttonShow, $target], function(el) { el.slideToggle(); });
  },

  filterMobileSearch: function(el) {
    el.preventDefault();
    var $el = $(el.currentTarget);
    var isMobile = window.innerWidth < 768;
    var $filter = $('.b-filter[data-filter-id = search]');

    $filter.toggleClass('active');
  },

  filterSelect: function() {
    var $selectFilter = $('.b-filter[data-filter-type = select]');
    var $select = $selectFilter.find('select');

    $select.styler({
      selectSearch: true
    });
  }
});

new Filters();
